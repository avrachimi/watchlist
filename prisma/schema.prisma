// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id String @id @default(cuid())
}

model Movie {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    imdbId           String @db.VarChar(255)
    title            String @db.VarChar(255)
    plot             String @db.Text
    rottenRating     Float  @db.Float
    metacriticRating Float  @db.Float
    imdbRating       Float  @db.Float
    imageUrl         String @db.VarChar(2000)
    type             String @db.VarChar(50)
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.VarChar(255)
    refresh_token_expires_in Int?
    access_token             String? @db.VarChar(255)
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.VarChar(255)
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
