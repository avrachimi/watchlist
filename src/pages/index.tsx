import {
  GetServerSideProps,
  InferGetServerSidePropsType,
  type NextPage,
} from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import thumbnail from "~/thumbnail.jpg";
import { AiFillStar, AiOutlineStar } from "react-icons/ai";

import { api } from "~/utils/api";
import { Navbar } from "~/components/navbar";
import Image from "next/image";
import { useEffect, useState } from "react";
import { z } from "zod";
import { TRPCClientError } from "@trpc/client";
import externalApi from "~/server/services/externalApi";

interface Props {
  id: number;
  name: string;
  overview: string;
  vote_average?: number;
  backdrop_path: string;
}
interface Props2 {
  movies: Movie[];
}

interface Movie {
  id: number;
  name: string;
  overview: string;
  vote_average?: number;
  backdrop_path: string;
}

const ItemGrid = ({ movies }: Props2) => {
  console.log(movies);
  return (
    <div className="grid gap-4 px-2 pt-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
      {movies.map((movie) => (
        <Item {...movie} />
      ))}
    </div>
  );
};

const Item = (movie: Props) => {
  console.log(movie);
  return (
    <div className="mx-2 flex h-full flex-col items-center justify-center overflow-hidden rounded-lg border-2 border-slate-200">
      <div className="h-full w-full border">
        <img src={movie.backdrop_path} className="h-full w-full object-cover" />
      </div>
      <div className="mt-2 text-center text-xl">{movie.name}</div>
      <div className="grid w-full grid-cols-2 items-end  px-2 py-2">
        <div className="flex scale-90">
          <AiFillStar />
          <AiFillStar />
          <AiFillStar />
          <AiFillStar />
          <AiOutlineStar />
        </div>
        <div className="text-right text-xs">
          <div>watched by</div>
          <div>5 friends</div>
        </div>
      </div>
    </div>
  );
};

const Home = ({
  movies,
}: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  const { data: sessionData } = useSession();

  if (!sessionData?.user) {
    return (
      <div className="flex h-screen w-full flex-col items-center justify-center bg-gray-900">
        <button
          className="rounded-xl bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
          onClick={() => void signIn()}
        >
          Sign in
        </button>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Watchlist</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen bg-gray-900">
        <Navbar />
        {movies && <ItemGrid movies={movies} />}
        <div className="flex items-center justify-center">
          <button
            className="my-5 rounded-lg border-2 border-slate-400 py-2 px-3 hover:bg-slate-700"
            onClick={() => signOut()}
          >
            Sign out
          </button>
        </div>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps<{
  movies: Movie[];
}> = async () => {
  const params = {
    api_key: process.env.TMDB_KEY,
    query: "Greys",
    /* region: "USA840", */
  };
  const { data } = await externalApi.get("/search/multi", { params: params });
  const movies: Movie[] = data.results;
  movies.map(
    (movie) =>
      (movie.backdrop_path = `https://image.tmdb.org/t/p/original${movie.backdrop_path}`)
  );
  movies.filter((movie) => movie.name !== undefined);

  return {
    props: {
      movies,
    },
  };
};

export default Home;
